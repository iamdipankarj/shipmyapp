generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime       @default(now())
  isSubscribed     Boolean        @default(false)
  lemonCustomerId  String?        @unique
  stripeCustomerId String?        @unique
  updatedAt        DateTime       @default(now()) @updatedAt
  accounts         Account[]
  sessions         Session[]
  Subscription     Subscription[]
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId
  stripeSubscriptionId String?
  lemonSubscriptionId  String?
  status               String
  planId               String
  amount               Int
  currency             String
  interval             String
  startDate            DateTime
  endDate              DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}
